{"ast":null,"code":"import update from \"immutability-helper\";\nimport { rockPaperScissors, winOrLose } from \"../../utils/index\";\nimport { RESTART_GAME, TOGGLE_HELP, GET_GUESS_REQUEST, GET_GUESS_SUCCESS, GET_GUESS_FAILURE, HANDLE_INPUT, SET_BEST_OF } from '../actions/';\nconst INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  humanGuess: \"\",\n  computerGuess: \"\",\n  lastGuessResult: \"\",\n  winStatus: \"Make a guess.\",\n  helpOpen: false,\n  error: null,\n  loading: false\n};\nexport default ((state = INITIAL_STATE, action) => {\n  let status = winOrLose(timesRight, timesWrong, bestOf);\n\n  switch (action.type) {\n    case HANDLE_INPUT:\n      console.log(action.payload);\n      return update(state, {\n        humanGuess: {\n          $set: action.payload\n        }\n      });\n\n    case SET_BEST_OF:\n      console.log(action.payload);\n      return update(state, {\n        bestOf: {\n          $set: action.payload\n        }\n      });\n\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: {\n          $set: !state.helpOpen\n        }\n      });\n\n    case GET_GUESS_REQUEST:\n      return update(state, {\n        loading: {\n          $set: true\n        }\n      });\n\n    case GET_GUESS_SUCCESS:\n      let computerWord = action.payload.name;\n      console.log(action);\n      let result = rockPaperScissors(state.humanGuess, computerWord);\n      console.log(\"computer word :\", computerWord, \"result :\", result);\n\n      if (result === 1) {\n        return update(state, {\n          loading: {\n            $set: false\n          },\n          timesRight: {\n            $set: state.timesRight += 1\n          },\n          computerGuess: {\n            $set: computerWord\n          },\n          lastGuessResult: {\n            $set: \"were right\"\n          },\n          winStatus: {\n            $set: winOrLose(state.timesRight, state.timesWrong, state.bestOf)\n          }\n        });\n      }\n\n      if (result === -1) {\n        return update(state, {\n          loading: {\n            $set: false\n          },\n          timesWrong: {\n            $set: state.timesWrong += 1\n          },\n          computerGuess: {\n            $set: computerWord\n          },\n          lastGuessResult: {\n            $set: \"were wrong\"\n          },\n          winStatus: {\n            $set: winOrLose(state.timesRight, state.timesWrong, state.bestOf)\n          }\n        });\n      } else {\n        return update(state, {\n          loading: {\n            $set: false\n          },\n          computerGuess: {\n            $set: computerWord\n          },\n          lastGuessResult: {\n            $set: \"tied\"\n          }\n        });\n      }\n\n    case GET_GUESS_FAILURE:\n      console.log(action.error);\n      return update(state, {\n        loading: {\n          $set: false\n        },\n        error: {\n          $set: action.error || \"There was an issue retrieving the computer's guess\"\n        }\n      });\n\n    case RESTART_GAME:\n      return update(state, {\n        bestOf: {\n          $set: 1\n        },\n        timesWrong: {\n          $set: 0\n        },\n        timesRight: {\n          $set: 0\n        },\n        humanGuess: {\n          $set: \"\"\n        },\n        computerGuess: {\n          $set: \"\"\n        },\n        lastGuessResult: {\n          $set: \"\"\n        },\n        helpOpen: {\n          $set: false\n        },\n        error: {\n          $set: null\n        },\n        loading: {\n          $set: false\n        }\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/jordanheffernan/projects/techEvals/billups/lizard-spock-client/src/store/reducers/index.js"],"names":["update","rockPaperScissors","winOrLose","RESTART_GAME","TOGGLE_HELP","GET_GUESS_REQUEST","GET_GUESS_SUCCESS","GET_GUESS_FAILURE","HANDLE_INPUT","SET_BEST_OF","INITIAL_STATE","bestOf","timesWrong","timesRight","humanGuess","computerGuess","lastGuessResult","winStatus","helpOpen","error","loading","state","action","status","type","console","log","payload","$set","computerWord","name","result"],"mappings":"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","sourcesContent":["import update from \"immutability-helper\";\nimport { rockPaperScissors, winOrLose } from \"../../utils/index\"\n\nimport {\n  RESTART_GAME,\n  TOGGLE_HELP,\n  GET_GUESS_REQUEST,\n  GET_GUESS_SUCCESS,\n  GET_GUESS_FAILURE,\n  HANDLE_INPUT,\n  SET_BEST_OF,\n} from '../actions/'\n\nconst INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  humanGuess: \"\",\n  computerGuess: \"\",\n  lastGuessResult: \"\",\n  winStatus: \"Make a guess.\",\n  helpOpen: false,\n  error: null,\n  loading: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  let status = winOrLose(timesRight, timesWrong, bestOf)\n  switch (action.type) {\n    case HANDLE_INPUT:\n      console.log(action.payload)\n      return update(state, {\n        humanGuess: { $set: action.payload }\n      });\n    case SET_BEST_OF:\n      console.log(action.payload)\n      return update(state, {\n        bestOf: { $set: action.payload }\n      });\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: { $set: !state.helpOpen }\n      });\n    case GET_GUESS_REQUEST:\n      return update(state, {\n        loading: { $set: true }\n      });\n    case GET_GUESS_SUCCESS:\n      let computerWord = action.payload.name;\n      console.log(action)\n      let result = rockPaperScissors(state.humanGuess, computerWord);\n      console.log(\"computer word :\", computerWord, \"result :\", result)\n      if (result === 1) {\n        return update(state, {\n          loading: { $set: false },\n          timesRight: { $set: state.timesRight += 1 },\n          computerGuess: { $set: computerWord },\n          lastGuessResult: { $set: \"were right\" },\n          winStatus: { $set: winOrLose(state.timesRight, state.timesWrong, state.bestOf) }\n        })\n      }\n      if (result === -1) {\n        return update(state, {\n          loading: { $set: false },\n          timesWrong: { $set: state.timesWrong += 1 },\n          computerGuess: { $set: computerWord },\n          lastGuessResult: { $set: \"were wrong\" },\n          winStatus: { $set: winOrLose(state.timesRight, state.timesWrong, state.bestOf) }\n        })\n      } else {\n        return update(state, {\n          loading: { $set: false },\n          computerGuess: { $set: computerWord },\n          lastGuessResult: { $set: \"tied\" },\n        })\n      }\n    case GET_GUESS_FAILURE:\n      console.log(action.error)\n      return update(state, {\n        loading: { $set: false },\n        error: { $set: action.error || \"There was an issue retrieving the computer's guess\" }\n      });\n\n    case RESTART_GAME:\n      return update(state, {\n        bestOf: { $set: 1 },\n        timesWrong: { $set: 0 },\n        timesRight: { $set: 0 },\n        humanGuess: { $set: \"\" },\n        computerGuess: { $set: \"\" },\n        lastGuessResult: { $set: \"\" },\n        helpOpen: { $set: false },\n        error: { $set: null },\n        loading: { $set: false },\n      })\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}