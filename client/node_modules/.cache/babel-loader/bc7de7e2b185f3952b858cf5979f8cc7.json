{"ast":null,"code":"import update from \"immutability-helper\";\nimport { rockPaperScissors, computerGuessToWords } from \"../../utils/index\";\nimport { RESTART_GAME, TOGGLE_HELP, GET_GUESS_REQUEST, GET_GUESS_SUCCESS, GET_GUESS_FAILURE, HANDLE_INPUT } from '../actions/';\nconst INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  humanGuess: \"\",\n  computerGuess: \"\",\n  tie: false,\n  helpOpen: false,\n  error: null,\n  loading: false\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: {\n          $set: !state.helpOpen\n        }\n      });\n\n    case GET_GUESS_REQUEST:\n      return update(state, {\n        loading: {\n          $set: true\n        }\n      });\n\n    case GET_GUESS_SUCCESS:\n      let computerWord = action.guess.name;\n      let result = rockPaperScissors(state.humanGuess, computerWord);\n      console.log(\"computer word :\", computerWord, \"result :\", result);\n\n      if (result === 1) {\n        return update(state, {\n          loading: {\n            $set: false\n          },\n          timesRight: {\n            $set: state.timesRight++\n          },\n          computerGuess: {\n            $set: computerWord\n          },\n          tie: {\n            $set: false\n          }\n        });\n      }\n\n      if (result === -1) {\n        return update(state, {\n          loading: {\n            $set: false\n          },\n          timesWrong: {\n            $set: state.timesWrong++\n          },\n          computerGuess: {\n            $set: computerWord\n          },\n          tie: {\n            $set: false\n          }\n        });\n      } else {\n        return update(state, {\n          loading: {\n            $set: false\n          },\n          computerGuess: {\n            $set: computerWord\n          },\n          tie: {\n            $set: true\n          }\n        });\n      }\n\n    case GET_GUESS_FAILURE:\n      console.log(action.error);\n      return update(state, {\n        loading: {\n          $set: false\n        },\n        error: {\n          $set: action.error || \"There was an issue retrieving the computer's guess\"\n        }\n      });\n\n    case HANDLE_INPUT:\n      console.log(action.payload);\n      return update(state, {\n        humanGuess: {\n          $set: action.payload\n        }\n      });\n\n    case RESTART_GAME:\n      return update(state, {\n        bestOf: {\n          $set: 1\n        },\n        timesWrong: {\n          $set: 0\n        },\n        timesRight: {\n          $set: 0\n        },\n        humanGuess: {\n          $set: \"\"\n        },\n        helpOpen: {\n          $set: false\n        },\n        error: {\n          $set: null\n        },\n        loading: {\n          $set: false\n        }\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/jordanheffernan/projects/techEvals/billups/lizard-spock-client/src/store/reducers/index.js"],"names":["update","rockPaperScissors","computerGuessToWords","RESTART_GAME","TOGGLE_HELP","GET_GUESS_REQUEST","GET_GUESS_SUCCESS","GET_GUESS_FAILURE","HANDLE_INPUT","INITIAL_STATE","bestOf","timesWrong","timesRight","humanGuess","computerGuess","tie","helpOpen","error","loading","state","action","type","$set","computerWord","guess","name","result","console","log","payload"],"mappings":"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","sourcesContent":["import update from \"immutability-helper\";\nimport { rockPaperScissors, computerGuessToWords } from \"../../utils/index\"\n\nimport {\n  RESTART_GAME,\n  TOGGLE_HELP,\n  GET_GUESS_REQUEST,\n  GET_GUESS_SUCCESS,\n  GET_GUESS_FAILURE,\n  HANDLE_INPUT,\n} from '../actions/'\n\nconst INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  humanGuess: \"\",\n  computerGuess: \"\",\n  tie: false,\n  helpOpen: false,\n  error: null,\n  loading: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n\n  switch (action.type) {\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: { $set: !state.helpOpen }\n      });\n    case GET_GUESS_REQUEST:\n      return update(state, {\n        loading: { $set: true }\n      });\n    case GET_GUESS_SUCCESS:\n      let computerWord = action.guess.name;\n      let result = rockPaperScissors(state.humanGuess, computerWord);\n      console.log(\"computer word :\", computerWord, \"result :\", result)\n      if (result === 1) {\n        return update(state, {\n          loading: { $set: false },\n          timesRight: { $set: state.timesRight++ },\n          computerGuess: { $set: computerWord },\n          tie: { $set: false }\n        })\n      }\n      if (result === -1) {\n        return update(state, {\n          loading: { $set: false },\n          timesWrong: { $set: state.timesWrong++ },\n          computerGuess: { $set: computerWord },\n          tie: { $set: false }\n        })\n      } else {\n        return update(state, {\n          loading: { $set: false },\n          computerGuess: { $set: computerWord },\n          tie: { $set: true }\n        })\n      }\n    case GET_GUESS_FAILURE:\n      console.log(action.error)\n      return update(state, {\n        loading: { $set: false },\n        error: { $set: action.error || \"There was an issue retrieving the computer's guess\" }\n      });\n    case HANDLE_INPUT:\n      console.log(action.payload)\n      return update(state, {\n        humanGuess: { $set: action.payload }\n      });\n    case RESTART_GAME:\n      return update(state, {\n        bestOf: { $set: 1 },\n        timesWrong: { $set: 0 },\n        timesRight: { $set: 0 },\n        humanGuess: { $set: \"\" },\n        helpOpen: { $set: false },\n        error: { $set: null },\n        loading: { $set: false },\n      })\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}