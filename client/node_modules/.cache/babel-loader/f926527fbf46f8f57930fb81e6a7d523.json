{"ast":null,"code":"import update from \"immutability-helper\";\nimport { winOrLose, rightOrWrong } from \"../utils/index\";\nimport { RESTART_GAME, TOGGLE_HELP, GET_GUESS_REQUEST, GET_GUESS_SUCCESS, GET_GUESS_FAILURE, HANDLE_INPUT } from '../actions/';\nconst INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  guess: \"\",\n  computerGuess: \"\",\n  helpOpen: false,\n  error: null,\n  loading: false\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: {\n          $set: !state.helpOpen\n        }\n      });\n\n    case GET_GUESS_REQUEST:\n      return update(state, {\n        loading: {\n          $set: true\n        }\n      });\n\n    case GET_GUESS_SUCCESS:\n      let feedback, winOrLose, computerGuess;\n      feedback = rockPaperScissors(state.guess, action.payload.random_number);\n      return update(state, {\n        loading: {\n          $set: false\n        }\n      });\n\n    case GET_GUESS_FAILURE:\n      return update(state, {\n        loading: {\n          $set: false\n        },\n        error: {\n          $set: action.payload.error || \"There was an issue retrieving the computer's guess\"\n        }\n      });\n\n    case HANDLE_INPUT:\n      return update(state, {\n        guess: {\n          $set: action.payload\n        }\n      });\n\n    case RESTART_GAME:\n      return update(state, {\n        bestOf: {\n          $set: 1\n        },\n        timesWrong: {\n          $set: 0\n        },\n        timesRight: {\n          $set: 0\n        },\n        guess: {\n          $set: \"\"\n        },\n        helpOpen: {\n          $set: false\n        },\n        error: {\n          $set: null\n        },\n        loading: {\n          $set: false\n        }\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/jordanheffernan/projects/techEvals/billups/lizard-spock-client/src/store/reducers/index.js"],"names":["update","winOrLose","rightOrWrong","RESTART_GAME","TOGGLE_HELP","GET_GUESS_REQUEST","GET_GUESS_SUCCESS","GET_GUESS_FAILURE","HANDLE_INPUT","INITIAL_STATE","bestOf","timesWrong","timesRight","guess","computerGuess","helpOpen","error","loading","state","action","type","$set","feedback","rockPaperScissors","payload","random_number"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,gBAAxC;AAEA,SACEC,YADF,EAEEC,WAFF,EAGEC,iBAHF,EAIEC,iBAJF,EAKEC,iBALF,EAMEC,YANF,QAOO,aAPP;AASA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,CADY;AAEpBC,EAAAA,UAAU,EAAE,CAFQ;AAGpBC,EAAAA,UAAU,EAAE,CAHQ;AAIpBC,EAAAA,KAAK,EAAE,EAJa;AAKpBC,EAAAA,aAAa,EAAE,EALK;AAMpBC,EAAAA,QAAQ,EAAE,KANU;AAOpBC,EAAAA,KAAK,EAAE,IAPa;AAQpBC,EAAAA,OAAO,EAAE;AARW,CAAtB;AAWA,gBAAe,CAACC,KAAK,GAAGT,aAAT,EAAwBU,MAAxB,KAAmC;AAEhD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKhB,WAAL;AACE,aAAOJ,MAAM,CAACkB,KAAD,EAAQ;AACnBH,QAAAA,QAAQ,EAAE;AAAEM,UAAAA,IAAI,EAAE,CAACH,KAAK,CAACH;AAAf;AADS,OAAR,CAAb;;AAGF,SAAKV,iBAAL;AACE,aAAOL,MAAM,CAACkB,KAAD,EAAQ;AACnBD,QAAAA,OAAO,EAAE;AAAEI,UAAAA,IAAI,EAAE;AAAR;AADU,OAAR,CAAb;;AAGF,SAAKf,iBAAL;AACE,UAAIgB,QAAJ,EAAcrB,SAAd,EAAyBa,aAAzB;AACAQ,MAAAA,QAAQ,GAAGC,iBAAiB,CAACL,KAAK,CAACL,KAAP,EAAcM,MAAM,CAACK,OAAP,CAAeC,aAA7B,CAA5B;AACA,aAAOzB,MAAM,CAACkB,KAAD,EAAQ;AACnBD,QAAAA,OAAO,EAAE;AAAEI,UAAAA,IAAI,EAAE;AAAR;AADU,OAAR,CAAb;;AAGF,SAAKd,iBAAL;AACE,aAAOP,MAAM,CAACkB,KAAD,EAAQ;AACnBD,QAAAA,OAAO,EAAE;AAAEI,UAAAA,IAAI,EAAE;AAAR,SADU;AAEnBL,QAAAA,KAAK,EAAE;AAAEK,UAAAA,IAAI,EAAEF,MAAM,CAACK,OAAP,CAAeR,KAAf,IAAwB;AAAhC;AAFY,OAAR,CAAb;;AAIF,SAAKR,YAAL;AACE,aAAOR,MAAM,CAACkB,KAAD,EAAQ;AACnBL,QAAAA,KAAK,EAAE;AAAEQ,UAAAA,IAAI,EAAEF,MAAM,CAACK;AAAf;AADY,OAAR,CAAb;;AAGF,SAAKrB,YAAL;AACE,aAAOH,MAAM,CAACkB,KAAD,EAAQ;AACnBR,QAAAA,MAAM,EAAE;AAAEW,UAAAA,IAAI,EAAE;AAAR,SADW;AAEnBV,QAAAA,UAAU,EAAE;AAAEU,UAAAA,IAAI,EAAE;AAAR,SAFO;AAGnBT,QAAAA,UAAU,EAAE;AAAES,UAAAA,IAAI,EAAE;AAAR,SAHO;AAInBR,QAAAA,KAAK,EAAE;AAAEQ,UAAAA,IAAI,EAAE;AAAR,SAJY;AAKnBN,QAAAA,QAAQ,EAAE;AAAEM,UAAAA,IAAI,EAAE;AAAR,SALS;AAMnBL,QAAAA,KAAK,EAAE;AAAEK,UAAAA,IAAI,EAAE;AAAR,SANY;AAOnBJ,QAAAA,OAAO,EAAE;AAAEI,UAAAA,IAAI,EAAE;AAAR;AAPU,OAAR,CAAb;;AAUF;AACE,aAAOH,KAAP;AApCJ;AAsCD,CAxCD","sourcesContent":["import update from \"immutability-helper\";\nimport { winOrLose, rightOrWrong } from \"../utils/index\"\n\nimport {\n  RESTART_GAME,\n  TOGGLE_HELP,\n  GET_GUESS_REQUEST,\n  GET_GUESS_SUCCESS,\n  GET_GUESS_FAILURE,\n  HANDLE_INPUT,\n} from '../actions/'\n\nconst INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  guess: \"\",\n  computerGuess: \"\",\n  helpOpen: false,\n  error: null,\n  loading: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n\n  switch (action.type) {\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: { $set: !state.helpOpen }\n      });\n    case GET_GUESS_REQUEST:\n      return update(state, {\n        loading: { $set: true }\n      });\n    case GET_GUESS_SUCCESS:\n      let feedback, winOrLose, computerGuess;\n      feedback = rockPaperScissors(state.guess, action.payload.random_number)\n      return update(state, {\n        loading: { $set: false },\n      });\n    case GET_GUESS_FAILURE:\n      return update(state, {\n        loading: { $set: false },\n        error: { $set: action.payload.error || \"There was an issue retrieving the computer's guess\" }\n      });\n    case HANDLE_INPUT:\n      return update(state, {\n        guess: { $set: action.payload }\n      });\n    case RESTART_GAME:\n      return update(state, {\n        bestOf: { $set: 1 },\n        timesWrong: { $set: 0 },\n        timesRight: { $set: 0 },\n        guess: { $set: \"\" },\n        helpOpen: { $set: false },\n        error: { $set: null },\n        loading: { $set: false },\n      })\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}