{"ast":null,"code":"import update from \"immutability-helper\";\nimport { RESTART_GAME, MAKE_GUESS, TOGGLE_HELP } from '../actions/';\nexport const INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  lastGuessCorrect: null,\n  helpOpen: false\n};\nexport default ((state = initialState, action) => {\n  if (action.type === RESTART_GAME) {\n    return Object.assign({}, state, {\n      guesses: [],\n      feedback: 'Make your guess!',\n      auralStatus: '',\n      correctAnswer: action.correctAnswer\n    });\n  }\n\n  if (action.type === MAKE_GUESS) {\n    let feedback, guess;\n    guess = parseInt(action.guess, 10);\n\n    if (isNaN(guess)) {\n      feedback = 'Please enter a valid number';\n      return Object.assign({}, state, {\n        feedback,\n        guesses: [...state.guesses, guess]\n      });\n    }\n\n    const difference = Math.abs(guess - state.correctAnswer);\n\n    if (difference >= 50) {\n      feedback = 'You\\'re Ice Cold...';\n    } else if (difference >= 30) {\n      feedback = 'You\\'re Cold...';\n    } else if (difference >= 10) {\n      feedback = 'You\\'re Warm.';\n    } else if (difference >= 1) {\n      feedback = 'You\\'re Hot!';\n    } else {\n      feedback = 'You got it!';\n    }\n\n    return Object.assign({}, state, {\n      feedback,\n      guesses: [...state.guesses, guess]\n    });\n  }\n\n  if (action.type === GENERATE_AURAL_UPDATE) {\n    const guesses = state.guesses,\n          feedback = state.feedback;\n    const pluralize = guesses.length !== 1;\n    let auralStatus = \"Here's the status of the game right now: \".concat(feedback, \" You've made \").concat(guesses.length, \" \").concat(pluralize ? 'guesses' : 'guess', \".\");\n\n    if (guesses.length > 0) {\n      auralStatus += \" \".concat(pluralize ? 'In order of most- to least-recent, they are' : 'It was', \": \").concat(guesses.reverse().join(', '));\n    }\n\n    return Object.assign({}, state, {\n      auralStatus\n    });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/jordanheffernan/projects/techEvals/billups/lizard-spock-client/src/store/reducers/index.js"],"names":["update","RESTART_GAME","MAKE_GUESS","TOGGLE_HELP","INITIAL_STATE","bestOf","timesWrong","timesRight","lastGuessCorrect","helpOpen","state","initialState","action","type","Object","assign","guesses","feedback","auralStatus","correctAnswer","guess","parseInt","isNaN","difference","Math","abs","GENERATE_AURAL_UPDATE","pluralize","length","reverse","join"],"mappings":"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","sourcesContent":["import update from \"immutability-helper\";\n\nimport { RESTART_GAME, MAKE_GUESS, TOGGLE_HELP } from '../actions/'\n\nexport const INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  lastGuessCorrect: null,\n  helpOpen: false\n};\n\nexport default (state = initialState, action) => {\n  if (action.type === RESTART_GAME) {\n    return Object.assign({}, state, {\n      guesses: [],\n      feedback: 'Make your guess!',\n      auralStatus: '',\n      correctAnswer: action.correctAnswer\n    });\n  }\n\n  if (action.type === MAKE_GUESS) {\n    let feedback, guess;\n    guess = parseInt(action.guess, 10);\n    if (isNaN(guess)) {\n      feedback = 'Please enter a valid number';\n      return Object.assign({}, state, {\n        feedback,\n        guesses: [...state.guesses, guess]\n      });\n    }\n\n    const difference = Math.abs(guess - state.correctAnswer);\n\n    if (difference >= 50) {\n      feedback = 'You\\'re Ice Cold...';\n    } else if (difference >= 30) {\n      feedback = 'You\\'re Cold...';\n    } else if (difference >= 10) {\n      feedback = 'You\\'re Warm.';\n    } else if (difference >= 1) {\n      feedback = 'You\\'re Hot!';\n    } else {\n      feedback = 'You got it!';\n    }\n\n    return Object.assign({}, state, {\n      feedback,\n      guesses: [...state.guesses, guess]\n    });\n  }\n\n  if (action.type === GENERATE_AURAL_UPDATE) {\n    const { guesses, feedback } = state;\n    const pluralize = guesses.length !== 1;\n\n    let auralStatus = `Here's the status of the game right now: ${feedback} You've made ${guesses.length} ${pluralize\n      ? 'guesses'\n      : 'guess'}.`;\n\n    if (guesses.length > 0) {\n      auralStatus += ` ${pluralize\n        ? 'In order of most- to least-recent, they are'\n        : 'It was'}: ${guesses.reverse().join(', ')}`;\n    }\n\n    return Object.assign({}, state, { auralStatus });\n  }\n\n  return state;\n\n};"]},"metadata":{},"sourceType":"module"}