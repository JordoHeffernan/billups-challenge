{"ast":null,"code":"import update from \"immutability-helper\";\nimport { winOrLose, rightOrWrong } from \"../utils/index\";\nimport { RESTART_GAME, TOGGLE_HELP, GET_GUESS_REQUEST, GET_GUESS_SUCCESS, GET_GUESS_FAILURE, HANDLE_INPUT } from '../actions/';\nconst INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  guess: \"\",\n  feedback: null,\n  result: \"Make a Guess!\",\n  computerGuess: \"\",\n  winOrLose: \"\",\n  helpOpen: false,\n  error: null,\n  loading: false\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: {\n          $set: !state.helpOpen\n        }\n      });\n\n    case GET_GUESS_REQUEST:\n      return update(state, {\n        loading: {\n          $set: true\n        }\n      });\n\n    case GET_GUESS_SUCCESS:\n      let feedback, winOrLose;\n      let guessResult = rockPaperScissors(state.guess, action.payload.random_number);\n      return update(state, {\n        loading: {\n          $set: false\n        },\n        winOrLose: {\n          $set: winOrLose(timesRight, timesWrong, bestOf)\n        }\n      });\n\n    case GET_GUESS_FAILURE:\n      return update(state, {\n        loading: {\n          $set: false\n        },\n        error: {\n          $set: action.payload.error || \"There was an issue retrieving the computer's guess\"\n        }\n      });\n\n    case HANDLE_INPUT:\n      return update(state, {\n        guess: {\n          $set: action.payload\n        }\n      });\n\n    case RESTART_GAME:\n      return update(state, {\n        bestOf: {\n          $set: 1\n        },\n        timesWrong: {\n          $set: 0\n        },\n        timesRight: {\n          $set: 0\n        },\n        feedback: {\n          $set: null\n        },\n        computerGuess: {\n          $set: null\n        },\n        winOrLose: {\n          $set: \"\"\n        },\n        helpOpen: {\n          $set: false\n        },\n        guess: {\n          $set: \"\"\n        },\n        error: {\n          $set: null\n        },\n        loading: {\n          $set: false\n        }\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/jordanheffernan/projects/techEvals/billups/lizard-spock-client/src/store/reducers/index.js"],"names":["update","winOrLose","rightOrWrong","RESTART_GAME","TOGGLE_HELP","GET_GUESS_REQUEST","GET_GUESS_SUCCESS","GET_GUESS_FAILURE","HANDLE_INPUT","INITIAL_STATE","bestOf","timesWrong","timesRight","guess","feedback","result","computerGuess","helpOpen","error","loading","state","action","type","$set","guessResult","rockPaperScissors","payload","random_number"],"mappings":"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","sourcesContent":["import update from \"immutability-helper\";\nimport { winOrLose, rightOrWrong } from \"../utils/index\"\n\nimport {\n  RESTART_GAME,\n  TOGGLE_HELP,\n  GET_GUESS_REQUEST,\n  GET_GUESS_SUCCESS,\n  GET_GUESS_FAILURE,\n  HANDLE_INPUT,\n} from '../actions/'\n\nconst INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  guess: \"\",\n  feedback: null,\n  result: \"Make a Guess!\",\n  computerGuess: \"\",\n  winOrLose: \"\",\n  helpOpen: false,\n  error: null,\n  loading: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n\n  switch (action.type) {\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: { $set: !state.helpOpen }\n      });\n    case GET_GUESS_REQUEST:\n      return update(state, {\n        loading: { $set: true }\n      });\n    case GET_GUESS_SUCCESS:\n      let feedback, winOrLose;\n      let guessResult = rockPaperScissors(state.guess, action.payload.random_number)\n\n      return update(state, {\n        loading: { $set: false },\n        winOrLose: { $set: winOrLose(timesRight, timesWrong, bestOf) }\n      });\n    case GET_GUESS_FAILURE:\n      return update(state, {\n        loading: { $set: false },\n        error: { $set: action.payload.error || \"There was an issue retrieving the computer's guess\" }\n      });\n    case HANDLE_INPUT:\n      return update(state, {\n        guess: { $set: action.payload }\n      });\n    case RESTART_GAME:\n      return update(state, {\n        bestOf: { $set: 1 },\n        timesWrong: { $set: 0 },\n        timesRight: { $set: 0 },\n        feedback: { $set: null },\n        computerGuess: { $set: null },\n        winOrLose: { $set: \"\" },\n        helpOpen: { $set: false },\n        guess: { $set: \"\" },\n        error: { $set: null },\n        loading: { $set: false },\n      })\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}