{"ast":null,"code":"import update from \"immutability-helper\";\nimport { RESTART_GAME, TOGGLE_HELP, MAKE_GUESS_REQUEST, MAKE_GUESS_SUCCESS, MAKE_GUESS_FAILURE, HANDLE_INPUT } from '../actions/';\nexport const INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  lastGuessCorrect: null,\n  helpOpen: false,\n  guess: \"\",\n  computerGuess: null,\n  error: null,\n  loading: false\n};\n\nfunction Game(state = INITIAL_STATE, action) {\n  let error;\n\n  switch (action.type) {\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: {\n          $set: !state.helpOpen\n        }\n      });\n\n    case MAKE_GUESS_REQUEST:\n      return update(state, {\n        loading: {\n          $set: true\n        }\n      });\n\n    case MAKE_GUESS_SUCCESS:\n      return update(state, {\n        loading: {\n          $set: false\n        },\n        computerGuess: {\n          $set: action.payload.random_number\n        }\n      });\n\n    case MAKE_GUESS_FAILURE:\n      return update(state, {\n        loading: {\n          $set: false\n        },\n        computerGuess: {\n          $set: null\n        },\n        error: {\n          $set: action.payload.error || \"There was an issue retrieving the computer's guess\"\n        }\n      });\n\n    case HANDLE_INPUT:\n      return update(state, {\n        guess: {\n          $set: action.payload\n        }\n      });\n\n    case HANDLE_INPUT:\n      return update(state, {\n        guess: {\n          $set: action.payload\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default ((state = initialState, action) => {\n  if (action.type === RESTART_GAME) {\n    return Object.assign({}, state, {\n      guesses: [],\n      feedback: 'Make your guess!',\n      auralStatus: '',\n      correctAnswer: action.correctAnswer\n    });\n  }\n\n  if (action.type === MAKE_GUESS) {\n    let feedback, guess;\n    guess = parseInt(action.guess, 10);\n\n    if (isNaN(guess)) {\n      feedback = 'Please enter a valid number';\n      return Object.assign({}, state, {\n        feedback,\n        guesses: [...state.guesses, guess]\n      });\n    }\n\n    const difference = Math.abs(guess - state.correctAnswer);\n\n    if (difference >= 50) {\n      feedback = 'You\\'re Ice Cold...';\n    } else if (difference >= 30) {\n      feedback = 'You\\'re Cold...';\n    } else if (difference >= 10) {\n      feedback = 'You\\'re Warm.';\n    } else if (difference >= 1) {\n      feedback = 'You\\'re Hot!';\n    } else {\n      feedback = 'You got it!';\n    }\n\n    return Object.assign({}, state, {\n      feedback,\n      guesses: [...state.guesses, guess]\n    });\n  }\n\n  if (action.type === GENERATE_AURAL_UPDATE) {\n    const guesses = state.guesses,\n          feedback = state.feedback;\n    const pluralize = guesses.length !== 1;\n    let auralStatus = \"Here's the status of the game right now: \".concat(feedback, \" You've made \").concat(guesses.length, \" \").concat(pluralize ? 'guesses' : 'guess', \".\");\n\n    if (guesses.length > 0) {\n      auralStatus += \" \".concat(pluralize ? 'In order of most- to least-recent, they are' : 'It was', \": \").concat(guesses.reverse().join(', '));\n    }\n\n    return Object.assign({}, state, {\n      auralStatus\n    });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/jordanheffernan/projects/techEvals/billups/lizard-spock-client/src/store/reducers/index.js"],"names":["update","RESTART_GAME","TOGGLE_HELP","MAKE_GUESS_REQUEST","MAKE_GUESS_SUCCESS","MAKE_GUESS_FAILURE","HANDLE_INPUT","INITIAL_STATE","bestOf","timesWrong","timesRight","lastGuessCorrect","helpOpen","guess","computerGuess","error","loading","Game","state","action","type","$set","payload","random_number","initialState","Object","assign","guesses","feedback","auralStatus","correctAnswer","MAKE_GUESS","parseInt","isNaN","difference","Math","abs","GENERATE_AURAL_UPDATE","pluralize","length","reverse","join"],"mappings":"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","sourcesContent":["import update from \"immutability-helper\";\n\nimport {\n  RESTART_GAME,\n  TOGGLE_HELP,\n  MAKE_GUESS_REQUEST,\n  MAKE_GUESS_SUCCESS,\n  MAKE_GUESS_FAILURE,\n  HANDLE_INPUT,\n} from '../actions/'\n\nexport const INITIAL_STATE = {\n  bestOf: 1,\n  timesWrong: 0,\n  timesRight: 0,\n  lastGuessCorrect: null,\n  helpOpen: false,\n  guess: \"\",\n  computerGuess: null,\n  error: null,\n  loading: false\n};\n\nfunction Game(state = INITIAL_STATE, action) {\n  let error;\n\n  switch (action.type) {\n    case TOGGLE_HELP:\n      return update(state, {\n        helpOpen: { $set: !state.helpOpen }\n      });\n    case MAKE_GUESS_REQUEST:\n      return update(state, {\n        loading: { $set: true }\n      });\n    case MAKE_GUESS_SUCCESS:\n      return update(state, {\n        loading: { $set: false },\n        computerGuess: { $set: action.payload.random_number }\n      });\n    case MAKE_GUESS_FAILURE:\n      return update(state, {\n        loading: { $set: false },\n        computerGuess: { $set: null },\n        error: { $set: action.payload.error || \"There was an issue retrieving the computer's guess\" }\n      });\n    case HANDLE_INPUT:\n      return update(state, {\n        guess: { $set: action.payload }\n      });\n    case HANDLE_INPUT:\n      return update(state, {\n        guess: { $set: action.payload }\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default (state = initialState, action) => {\n  if (action.type === RESTART_GAME) {\n    return Object.assign({}, state, {\n      guesses: [],\n      feedback: 'Make your guess!',\n      auralStatus: '',\n      correctAnswer: action.correctAnswer\n    });\n  }\n\n  if (action.type === MAKE_GUESS) {\n    let feedback, guess;\n    guess = parseInt(action.guess, 10);\n    if (isNaN(guess)) {\n      feedback = 'Please enter a valid number';\n      return Object.assign({}, state, {\n        feedback,\n        guesses: [...state.guesses, guess]\n      });\n    }\n\n    const difference = Math.abs(guess - state.correctAnswer);\n\n    if (difference >= 50) {\n      feedback = 'You\\'re Ice Cold...';\n    } else if (difference >= 30) {\n      feedback = 'You\\'re Cold...';\n    } else if (difference >= 10) {\n      feedback = 'You\\'re Warm.';\n    } else if (difference >= 1) {\n      feedback = 'You\\'re Hot!';\n    } else {\n      feedback = 'You got it!';\n    }\n\n    return Object.assign({}, state, {\n      feedback,\n      guesses: [...state.guesses, guess]\n    });\n  }\n\n  if (action.type === GENERATE_AURAL_UPDATE) {\n    const { guesses, feedback } = state;\n    const pluralize = guesses.length !== 1;\n\n    let auralStatus = `Here's the status of the game right now: ${feedback} You've made ${guesses.length} ${pluralize\n      ? 'guesses'\n      : 'guess'}.`;\n\n    if (guesses.length > 0) {\n      auralStatus += ` ${pluralize\n        ? 'In order of most- to least-recent, they are'\n        : 'It was'}: ${guesses.reverse().join(', ')}`;\n    }\n\n    return Object.assign({}, state, { auralStatus });\n  }\n\n  return state;\n\n};"]},"metadata":{},"sourceType":"module"}